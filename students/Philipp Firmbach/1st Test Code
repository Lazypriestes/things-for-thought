import sqlite3
import random
import ipywidgets as widgets
from IPython.display import display, clear_output

# Spr√ºche vorab definieren
initial_sprueche = [
    "Das Leben ist kurz ‚Äì lache, solange du noch Z√§hne hast.",
    "Jeder Tag ist eine neue Chance f√ºr ein kleines Wunder.",
    "Dein Herz wei√ü, wohin du gehst. H√∂r genau hin.",
    "Du bist der Architekt deines eigenen Gl√ºcks.",
    "Der wahre Schatz im Leben ist die Freundschaft.",
    "Auch der kleinste Schritt in die richtige Richtung ist ein Fortschritt.",
    "Deine Tr√§ume sind der Kompass, der dich leitet.",
    "Heute ist der erste Tag vom Rest deines Lebens.",
    "Die besten Dinge im Leben sind nicht die, die man f√ºr Geld kaufen kann.",
    "Wer nicht wagt, der nicht gewinnt ‚Äì also wag!",
    "Gl√ºck ist die Kunst, das Leben zu umarmen, wie es ist."
]

# Datenbank initialisieren
def initialize_db():
    conn = sqlite3.connect("sprueche.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Sprueche (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            spruch TEXT NOT NULL
        )
    """)
    conn.commit()
    conn.close()

# Spr√ºche in die Datenbank einf√ºgen
def populate_db(sprueche):
    conn = sqlite3.connect("sprueche.db")
    cursor = conn.cursor()
    cursor.executemany(
        "INSERT INTO Sprueche (spruch) VALUES (?)",
        [(spruch,) for spruch in sprueche]
    )
    conn.commit()
    conn.close()

# Spruch speichern
def save_spruch(spruch):
    conn = sqlite3.connect("sprueche.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO Sprueche (spruch) VALUES (?)", (spruch,))
    conn.commit()
    conn.close()

# Zuf√§lligen Spruch abrufen
def get_random_spruch():
    conn = sqlite3.connect("sprueche.db")
    cursor = conn.cursor()
    cursor.execute("SELECT spruch FROM Sprueche")
    results = cursor.fetchall()
    conn.close()
    if results:
        return random.choice(results)[0]
    else:
        return None  # R√ºckgabe von None, wenn keine Spr√ºche vorhanden sind

# Callback-Funktion f√ºr das Speichern eines Spruchs
def on_submit(change):
    spruch = text_box.value.strip()
    if not spruch:
        output.clear_output()
        with output:
            print("‚ùå Bitte einen g√ºltigen Spruch eingeben!")
    else:
        save_spruch(spruch)
        output.clear_output()
        with output:
            print(f"‚úÖ Spruch wurde erfolgreich gespeichert: '{spruch}'")
        text_box.value = ""

# Callback-Funktion f√ºr das Abrufen eines zuf√§lligen Spruchs
def on_random_spruch(change):
    random_spruch = get_random_spruch()
    output.clear_output()
    with output:
        if random_spruch:
            print(f"üé≤ Zuf√§lliger Spruch: '{random_spruch}'")
        else:
            print("‚ùå Keine Spr√ºche in der Datenbank! Bitte f√ºge zuerst einen Spruch hinzu.")

# Datenbank initialisieren und Spr√ºche hinzuf√ºgen
initialize_db()
populate_db(initial_sprueche)

# Eingabefeld und Buttons erstellen
text_box = widgets.Text(
    description='Spruch:',
    placeholder='Hier Spruch eingeben',
    layout=widgets.Layout(width='400px')
)
submit_button = widgets.Button(
    description="Speichern",
    button_style='success',
    tooltip='Klick, um den Spruch zu speichern'
)
random_button = widgets.Button(
    description="Zuf√§lliger Spruch",
    button_style='info',
    tooltip='Klick, um einen zuf√§lligen Spruch anzuzeigen'
)
output = widgets.Output()

# Button-Ereignisse verkn√ºpfen
submit_button.on_click(on_submit)
random_button.on_click(on_random_spruch)

# Elemente anzeigen
display(widgets.VBox([text_box, submit_button, random_button, output]))
